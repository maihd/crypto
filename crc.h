#ifndef __CRC_H__
#define __CRC_H__

#ifndef __crc__
#define __crc__
#endif

#ifndef CRC_XOR_VALUE
#define CRC_XOR_VALUE  0x000
#endif

#ifndef CRC_INIT_VALUE
#define CRC_INIT_VALUE 0x000
#endif

#ifndef CRC_BITS
#define CRC_BITS 8
#endif

#ifndef CRC_REFLECT
#define CRC_REFLECT 0
#endif

#ifndef CRC_TYPE
#define CRC_TYPE unsigned int
#endif

typedef CRC_TYPE crc_t;

/**
 * Generate crc lookup table
 * @note: crc lookup table is precomputed with 'unsigned int',
 *        so no need to call crc_init if you use 'unsigned int' 
 */
__crc__ void crc_init(void);

/**
 * Calculate CRC checksum of the given data
 *
 * @param  data - Pointer to the data
 * @param  size - Size of the data
 * @return CRC checksum
 */
__crc__ crc_t crc_calc(const void* data, int size);

#ifdef CRC_IMPL
/* BEGIN OF IMPLEMENTATION */

#if CRC_REFLECT
#  define crc_reflect_val(x) (int  )crc_reflect(x, CRC_BITS)
#  define crc_reflect_res(x) (crc_t)crc_reflect(x, CRC_BITS * sizeof(crc_t))
#else
#  define crc_reflect_val(x) (x)
#  define crc_reflect_res(x) (x)
#endif

static const crc_t crc_pol = 0xD8;
static const crc_t crc_top = 1 << (CRC_BITS * sizeof(crc_t) - 1);
static crc_t crc_table[256] = {
    0x0000, 0x00d8, 0x01b0, 0x0168, 0x0360, 0x03b8, 0x02d0, 0x0208,
    0x06c0, 0x0618, 0x0770, 0x07a8, 0x05a0, 0x0578, 0x0410, 0x04c8,
    0x0d80, 0x0d58, 0x0c30, 0x0ce8, 0x0ee0, 0x0e38, 0x0f50, 0x0f88,
    0x0b40, 0x0b98, 0x0af0, 0x0a28, 0x0820, 0x08f8, 0x0990, 0x0948,
    0x1b00, 0x1bd8, 0x1ab0, 0x1a68, 0x1860, 0x18b8, 0x19d0, 0x1908,
    0x1dc0, 0x1d18, 0x1c70, 0x1ca8, 0x1ea0, 0x1e78, 0x1f10, 0x1fc8,
    0x1680, 0x1658, 0x1730, 0x17e8, 0x15e0, 0x1538, 0x1450, 0x1488,
    0x1040, 0x1098, 0x11f0, 0x1128, 0x1320, 0x13f8, 0x1290, 0x1248,
    0x3600, 0x36d8, 0x37b0, 0x3768, 0x3560, 0x35b8, 0x34d0, 0x3408,
    0x30c0, 0x3018, 0x3170, 0x31a8, 0x33a0, 0x3378, 0x3210, 0x32c8,
    0x3b80, 0x3b58, 0x3a30, 0x3ae8, 0x38e0, 0x3838, 0x3950, 0x3988,
    0x3d40, 0x3d98, 0x3cf0, 0x3c28, 0x3e20, 0x3ef8, 0x3f90, 0x3f48,
    0x2d00, 0x2dd8, 0x2cb0, 0x2c68, 0x2e60, 0x2eb8, 0x2fd0, 0x2f08,
    0x2bc0, 0x2b18, 0x2a70, 0x2aa8, 0x28a0, 0x2878, 0x2910, 0x29c8,
    0x2080, 0x2058, 0x2130, 0x21e8, 0x23e0, 0x2338, 0x2250, 0x2288,
    0x2640, 0x2698, 0x27f0, 0x2728, 0x2520, 0x25f8, 0x2490, 0x2448,
    0x6c00, 0x6cd8, 0x6db0, 0x6d68, 0x6f60, 0x6fb8, 0x6ed0, 0x6e08,
    0x6ac0, 0x6a18, 0x6b70, 0x6ba8, 0x69a0, 0x6978, 0x6810, 0x68c8,
    0x6180, 0x6158, 0x6030, 0x60e8, 0x62e0, 0x6238, 0x6350, 0x6388,
    0x6740, 0x6798, 0x66f0, 0x6628, 0x6420, 0x64f8, 0x6590, 0x6548,
    0x7700, 0x77d8, 0x76b0, 0x7668, 0x7460, 0x74b8, 0x75d0, 0x7508,
    0x71c0, 0x7118, 0x7070, 0x70a8, 0x72a0, 0x7278, 0x7310, 0x73c8,
    0x7a80, 0x7a58, 0x7b30, 0x7be8, 0x79e0, 0x7938, 0x7850, 0x7888,
    0x7c40, 0x7c98, 0x7df0, 0x7d28, 0x7f20, 0x7ff8, 0x7e90, 0x7e48,
    0x5a00, 0x5ad8, 0x5bb0, 0x5b68, 0x5960, 0x59b8, 0x58d0, 0x5808,
    0x5cc0, 0x5c18, 0x5d70, 0x5da8, 0x5fa0, 0x5f78, 0x5e10, 0x5ec8,
    0x5780, 0x5758, 0x5630, 0x56e8, 0x54e0, 0x5438, 0x5550, 0x5588,
    0x5140, 0x5198, 0x50f0, 0x5028, 0x5220, 0x52f8, 0x5390, 0x5348,
    0x4100, 0x41d8, 0x40b0, 0x4068, 0x4260, 0x42b8, 0x43d0, 0x4308,
    0x47c0, 0x4718, 0x4670, 0x46a8, 0x44a0, 0x4478, 0x4510, 0x45c8,
    0x4c80, 0x4c58, 0x4d30, 0x4de8, 0x4fe0, 0x4f38, 0x4e50, 0x4e88,
    0x4a40, 0x4a98, 0x4bf0, 0x4b28, 0x4920, 0x49f8, 0x4890, 0x4848,
};
const int crc_table_size = sizeof(crc_table) / sizeof(crc_table[0]);

#if CRC_REFLECT
/* @function: crc_reflect */
static unsigned long crc_reflect(unsigned long data, int bits)
{
    int i;
    unsigned int res = 0;
    for (i = 0; i < bits; i++)
    {
	if (data & 0x1)
	{
	    res |= (1 << ((bits - 1) - i));
	}
	data = (data >> 1);
    }
    return res;
}
#endif

/* @function: crc_init */
void crc_init(void)
{
    int i, j;
    crc_t res;
    for (i = 0; i < crc_table_size; i++)
    {
	res = i << (CRC_BITS * (sizeof(crc_t) - 1));
	for (j = CRC_BITS; j > 0; j--)
	{
	    if (res & crc_top)
	    {
		res = (res << 1) ^ crc_pol;
	    }
	    else
	    {
		res = (res << 1);
	    }
	}
	crc_table[i] = res;
    }
}

/* @function: crc_calc */
crc_t crc_calc(const void* data, int size)
{
    int idx, val;
    crc_t res = CRC_INIT_VALUE;
    unsigned char* ptr = (unsigned char*)data;

    for (idx = 0; idx < size; idx++)
    {
	val = crc_reflect_val(ptr[idx]);
	val = val ^ (res >> (CRC_BITS * (sizeof(crc_t) - 1)));
	res = crc_table[val] ^ (res << CRC_BITS);
    }
	    
    return (crc_reflect_res(res) ^ CRC_XOR_VALUE);
}

#if HAVE_CRC_PRINT_TABLE
static void crc_print_table(void)
{
    printf("static unsigned char crc_table[%d] = {\n", crc_table_size);
    for (int i = 0; i < crc_table_size;)
    {
	printf("    ");
	for (int j = 0; j < 8; i++, j++)
	{
	    printf("%#6x, ", crc_table[i]);  
	}
	printf("\n");
    }
    printf("};\n");
}
#endif

/* END OF IMPLEMENTATION */
#endif

#endif /* __CRC_H__ */
